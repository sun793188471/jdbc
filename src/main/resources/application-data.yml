# ------------------------------------连接池配置------------------------------------------
spring:
  autoconfigure:
    exclude:
      - org.apache.shardingsphere.spring.boot.ShardingSphereAutoConfiguration
  main:
    allow-bean-definition-overriding: true
  datasource:
    dynamic:
      strict: true #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.
      datasource:
        master:
          driverClassName: com.mysql.cj.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
          url: jdbc:mysql://10.128.163.160:3306/demo?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
          username: cloudwalk
          password: Cloudwalk@123!
  shardingsphere:
    mode:
    # 将运行模式配置为Standalone单机模式（Cluster：集群模式）
      type: Standalone
      repository:
        type: JDBC
    # 配置多个数据源
    datasource:
      names: ds0,ds1
      # 配置第一个数据源
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://10.128.163.160:3306/jdbc1?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
        username: cloudwalk
        password: Cloudwalk@123!
      # 配置第二个数据源
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://10.128.163.160:3306/jdbc2?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
        username: cloudwalk
        password: Cloudwalk@123!
    # 执行时显示SQL语句
    props:
      # 日志显示具体的SQL
      sql-show: true
    # 配置分片规则
    rules:
      # 配置分片策略
      sharding:
        # 配置所有分片表
        tables:
          # 首先配置商品表的分片策略
          shoping:
            # 声明商品表所在的真实数据节点（这里先显式声明一个节点测试）
            actual-data-nodes: ds$->{0..1}.shoping_0$->{0..1}
            # 配置分表规则
            table-strategy:
              standard:
                # 配置分表的路由键：商品名称
                sharding-column: shoping_id
                sharding-algorithm-name: abc
            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键为shoping_id（数据库中的列名）
                sharding-column: shoping_id
                # 配置分片算法（需要配置一个名词，通过别名指向具体的策略）
                sharding-algorithm-name: db-inline-mod
        sharding-algorithms:
          # 配置前面的分库算法
          db-inline-mod:
            # 声明是 INLINE 简单类型的分片
            type: INLINE
            props:
              # 选择对shoping_id做取模运算
              algorithm-expression: ds$->{shoping_id % 2}
          abc:
            # 自定义分表算法
            type: CLASS_BASED
            props:
              strategy: STANDARD
              algorithmClassName: com.cn.beep.data.sharding.ShopStandardSA
          # 配置哈希取模的分表算法
          key-hash-mod:
            # 使用内置的哈希取模算法
            type: HASH_MOD
            props:
              # 声明分表的节点数量
              sharding-count: 2
# ------------------------------------mybatis-plus配置------------------------------------------
mybatis-plus:
  #  mapper-locations: classpath*:**/mapper/*.xml
  type-aliases-package: com.cw.cbs.wh.algorithm.entity.**
  check-config-location: true
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-behavior: partial
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-value: 1
      logic-not-delete-value: 0
      id-type: input
